import { Component } from "obsidian";
import * as THREE from "three";

export default class DiceRenderer extends Component {
    renderer: THREE.WebGLRenderer;
    get canvasEl() {
        if (!this.renderer) return null;
        return this.renderer.domElement;
    }
    constructor() {
        super();
    }
}

const VERTICES = {
    d4: [
        [1, 1, 1],
        [-1, -1, 1],
        [-1, 1, -1],
        [1, -1, -1]
    ],
    d6: [
        [-1, -1, -1],
        [1, -1, -1],
        [1, 1, -1],
        [-1, 1, -1],
        [-1, -1, 1],
        [1, -1, 1],
        [1, 1, 1],
        [-1, 1, 1]
    ],
    d8: [
        [1, 0, 0],
        [-1, 0, 0],
        [0, 1, 0],
        [0, -1, 0],
        [0, 0, 1],
        [0, 0, -1]
    ],
    d10: [
        [1, 0, -0.105],
        [0.8090169943749475, 0.5877852522924731, 0.105],
        [0.30901699437494745, 0.9510565162951535, -0.105],
        [-0.30901699437494734, 0.9510565162951536, 0.105],
        [-0.8090169943749473, 0.5877852522924732, -0.105],
        [-1, 1.2246467991473532e-16, 0.105],
        [-0.8090169943749475, -0.587785252292473, -0.105],
        [-0.30901699437494756, -0.9510565162951535, 0.105],
        [0.30901699437494723, -0.9510565162951536, -0.105],
        [0.8090169943749473, -0.5877852522924734, 0.105],
        [0, 0, -1]
    ],
    d12: [
        [0, 0.6180339887498948, 1.618033988749895],
        [0, 0.6180339887498948, -1.618033988749895],
        [0, -0.6180339887498948, 1.618033988749895],
        [0, -0.6180339887498948, -1.618033988749895],
        [1.618033988749895, 0, 0.6180339887498948],
        [1.618033988749895, 0, -0.6180339887498948],
        [-1.618033988749895, 0, 0.6180339887498948],
        [-1.618033988749895, 0, -0.6180339887498948],
        [0.6180339887498948, 1.618033988749895, 0],
        [0.6180339887498948, -1.618033988749895, 0],
        [-0.6180339887498948, 1.618033988749895, 0],
        [-0.6180339887498948, -1.618033988749895, 0],
        [1, 1, 1],
        [1, 1, -1],
        [1, -1, 1],
        [1, -1, -1],
        [-1, 1, 1],
        [-1, 1, -1],
        [-1, -1, 1],
        [-1, -1, -1]
    ],
    d20: [
        [-1, 1.618033988749895, 0],
        [1, 1.618033988749895, 0],
        [-1, -1.618033988749895, 0],
        [1, -1.618033988749895, 0],
        [0, -1, 1.618033988749895],
        [0, 1, 1.618033988749895],
        [0, -1, -1.618033988749895],
        [0, 1, -1.618033988749895],
        [1.618033988749895, 0, -1],
        [1.618033988749895, 0, 1],
        [-1.618033988749895, 0, -1],
        [-1.618033988749895, 0, 1]
    ]
};

const FACES = {
    d4: [
        [1, 0, 2, 1],
        [0, 1, 3, 2],
        [0, 3, 2, 3],
        [1, 2, 3, 4]
    ],
    d6: [
        [0, 3, 2, 1, 1],
        [1, 2, 6, 5, 2],
        [0, 1, 5, 4, 3],
        [3, 7, 6, 2, 4],
        [0, 4, 7, 3, 5],
        [4, 5, 6, 7, 6]
    ],
    d10: [
        [5, 6, 7, 11, 0],
        [4, 3, 2, 10, 1],
        [1, 2, 3, 11, 2],
        [0, 9, 8, 10, 3],
        [7, 8, 9, 11, 4],
        [8, 7, 6, 10, 5],
        [9, 0, 1, 11, 6],
        [2, 1, 0, 10, 7],
        [3, 4, 5, 11, 8],
        [6, 5, 4, 10, 9]
    ],
    d12: [
        [2, 14, 4, 12, 0, 1],
        [15, 9, 11, 19, 3, 2],
        [16, 10, 17, 7, 6, 3],
        [6, 7, 19, 11, 18, 4],
        [6, 18, 2, 0, 16, 5],
        [18, 11, 9, 14, 2, 6],
        [1, 17, 10, 8, 13, 7],
        [1, 13, 5, 15, 3, 8],
        [13, 8, 12, 4, 5, 9],
        [5, 4, 14, 9, 15, 10],
        [0, 12, 8, 10, 16, 11],
        [3, 19, 7, 17, 1, 12]
    ],
    d20: [
        [0, 11, 5, 1],
        [0, 5, 1, 2],
        [0, 1, 7, 3],
        [0, 7, 10, 4],
        [0, 10, 11, 5],
        [1, 5, 9, 6],
        [5, 11, 4, 7],
        [11, 10, 2, 8],
        [10, 7, 6, 9],
        [7, 1, 8, 10],
        [3, 9, 4, 11],
        [3, 4, 2, 12],
        [3, 2, 6, 13],
        [3, 6, 8, 14],
        [3, 8, 9, 15],
        [4, 9, 5, 16],
        [2, 4, 11, 17],
        [6, 2, 10, 18],
        [8, 6, 7, 19],
        [9, 8, 1, 20]
    ]
};

type DiceSize = "d4" | "d6" | "d10" | "d12" | "d20";

class DiceMesh extends Component {
    dice: THREE.PolyhedronGeometry;
    faces: number[][];
    vertices: number[][];
    vectors: THREE.Vector3[];
    constructor(public type: DiceSize) {
        super();
        this.vertices = VERTICES[type];
        this.faces = FACES[type];

        this.buildVectors();
    }
    buildVectors() {
        this.vectors = new Array(this.vertices.length);
        for (let i = 0; i < this.vertices.length; ++i) {
            this.vectors[i] = new THREE.Vector3()
                .fromArray(this.vertices[i])
                .normalize();
        }
    }
    onunload() {
        super.onunload();
        if (this.dice) this.dice.dispose();
    }
}

class DiceMaterial extends Component {
    material: THREE.MeshBasicMaterial;
    onunload() {
        super.onunload();
        this.material.dispose();
    }
}
